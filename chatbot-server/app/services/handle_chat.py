import asyncio
import re
import json
from app.schemas.chat import ChatRequest
from app.utils.intent import detect_intent, handle_off_topic_response, handle_tech_issue_response, handle_greeting_response
from app.chains.chat_chain import get_chain_by_intent, get_multi_turn_chain
from app.utils.redis_client import get_session, save_session
from app.db.user_usage_db import get_user_current_usage
from app.db.plan_db import get_all_plans
from app.db.coupon_like_db import get_liked_brand_ids
from app.db.subscription_db import get_products_from_db
from app.db.brand_db import get_life_brands_from_db

def create_simple_stream(text: str):
    """Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏Î•º Ïä§Ìä∏Î¶¨Î∞çÏúºÎ°ú Î≥ÄÌôò"""
    async def stream():
        words = text.split(' ')
        for i, word in enumerate(words):
            yield word
            if i < len(words) - 1:
                yield ' '
            await asyncio.sleep(0.05)
    return stream

async def handle_chat(req: ChatRequest):
    """ÌÜµÏùºÎêú ÏÑ∏ÏÖò ÌÇ§Î•º ÏÇ¨Ïö©ÌïòÎäî Ï±ÑÌåÖ Ìï∏Îì§Îü¨ - Î©ÄÌã∞ÌÑ¥ Í∞úÏÑ†"""

    tone = getattr(req, 'tone', 'general')
    print(f"[DEBUG] ========== HANDLE_CHAT START ==========")
    print(f"[DEBUG] Input - tone: {tone}, message: '{req.message}'")

    # üî• ÏÑ∏ÏÖòÏóêÏÑú Î©ÄÌã∞ÌÑ¥ ÏßÑÌñâ ÏÉÅÌÉú ÌôïÏù∏ - ÌÜµÏùºÎêú ÌÇ§ ÏÇ¨Ïö©
    session = get_session(req.session_id)
    print(f"[DEBUG] Current session keys: {list(session.keys())}")

    # Í∏∞Ï°¥ ÌÇ§Îì§ÏùÑ ÌÜµÏùºÎêú ÌÇ§Î°ú Î≥ÄÌôò (ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò)
    _migrate_session_keys(session, req.session_id)

    # ÌòÑÏû¨ Î©ÄÌã∞ÌÑ¥ ÏÉÅÌÉú ÌôïÏù∏
    phone_plan_step = session.get("phone_plan_flow_step", 0)
    subscription_step = session.get("subscription_flow_step", 0)

    print(f"[DEBUG] Multiturn status - phone_plan: {phone_plan_step}, subscription: {subscription_step}")

    # üî• Î©ÄÌã∞ÌÑ¥Ïù¥ ÏßÑÌñâ Ï§ëÏù¥Î©¥ Ìï¥Îãπ ÌîåÎ°úÏö∞ Í≥ÑÏÜç ÏßÑÌñâ
    if phone_plan_step > 0:
        print(f"[DEBUG] >>> CONTINUING PHONE PLAN MULTI-TURN (step: {phone_plan_step}) <<<")
        try:
            return await get_multi_turn_chain(req, "phone_plan_multi", tone)
        except Exception as e:
            print(f"[ERROR] Phone plan multi-turn failed: {e}")
            # ÌîåÎ°úÏö∞ Ï¥àÍ∏∞Ìôî ÌõÑ ÏóêÎü¨ ÏùëÎãµ
            _reset_multiturn_session(session, req.session_id, "phone_plan")
            return create_simple_stream("ÏöîÍ∏àÏ†ú ÏßàÎ¨∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî. Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî! üòÖ")

    elif subscription_step > 0:
        print(f"[DEBUG] >>> CONTINUING SUBSCRIPTION MULTI-TURN (step: {subscription_step}) <<<")
        try:
            return await get_multi_turn_chain(req, "subscription_multi", tone)
        except Exception as e:
            print(f"[ERROR] Subscription multi-turn failed: {e}")
            # ÌîåÎ°úÏö∞ Ï¥àÍ∏∞Ìôî ÌõÑ ÏóêÎü¨ ÏùëÎãµ
            _reset_multiturn_session(session, req.session_id, "subscription")
            return create_simple_stream("Íµ¨ÎèÖ ÏÑúÎπÑÏä§ ÏßàÎ¨∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî. Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî! üòÖ")

    # üî• ÏÉàÎ°úÏö¥ ÎåÄÌôî - AI Í∏∞Î∞ò Ïù∏ÌÖêÌä∏ Í∞êÏßÄ (Ïª®ÌÖçÏä§Ìä∏ Ìè¨Ìï®)
    print(f"[DEBUG] >>> STARTING NEW CONVERSATION - DETECTING INTENT <<<")
    try:
        # ÏÑ∏ÏÖò Ïª®ÌÖçÏä§Ìä∏Î•º Ïù∏ÌÖêÌä∏ Î∂ÑÎ•òÏóê Ï†ÑÎã¨
        intent = await detect_intent(req.message, user_context=session)
        print(f"[DEBUG] >>> AI DETECTED INTENT: '{intent}' with context <<<")
    except Exception as e:
        print(f"[ERROR] Intent detection failed: {e}")
        intent = "off_topic_unclear"

    # üî• Ïù∏ÌÖêÌä∏Î≥Ñ Ï≤òÎ¶¨ - multiturn_answer Ïö∞ÏÑ† Ï≤òÎ¶¨
    print(f"[DEBUG] >>> PROCESSING INTENT: '{intent}' <<<")

    try:
        # Î©ÄÌã∞ÌÑ¥ ÎãµÎ≥Ä Ï≤òÎ¶¨ (ÏµúÏö∞ÏÑ†)
        if intent == "multiturn_answer":
            print(f"[DEBUG] >>> HANDLING MULTITURN_ANSWER <<<")
            # ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ ÌîåÎ°úÏö∞Í∞Ä ÏóÜÎã§Î©¥ ÏÉàÎ°ú ÏãúÏûë
            if phone_plan_step == 0 and subscription_step == 0:
                # ÎãµÎ≥Ä ÎÇ¥Ïö©Ïóê Îî∞Îùº Ï†ÅÏ†àÌïú ÌîåÎ°úÏö∞ ÏãúÏûë
                if _should_start_plan_flow(req.message):
                    return await get_multi_turn_chain(req, "phone_plan_multi", tone)
                elif _should_start_subscription_flow(req.message):
                    return await get_multi_turn_chain(req, "subscription_multi", tone)
                else:
                    # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏöîÍ∏àÏ†ú ÌîåÎ°úÏö∞ ÏãúÏûë
                    return await get_multi_turn_chain(req, "phone_plan_multi", tone)
            else:
                # Ïù¥ÎØ∏ ÌîåÎ°úÏö∞Í∞Ä ÏßÑÌñâ Ï§ëÏù¥Î©¥ Í≥ÑÏÜç ÏßÑÌñâ (ÏúÑÏóêÏÑú Ï≤òÎ¶¨Îê®)
                return create_simple_stream("Î©ÄÌã∞ÌÑ¥ Ï≤òÎ¶¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî. üòÖ")

        # Ïù∏ÏÇ¨ Ï≤òÎ¶¨ (ÏµúÏö∞ÏÑ†)
        elif intent == "greeting" or req.message.lower().strip() in ["ÏïàÎÖï", "hi", "hello", "ÌïòÏù¥", "Ìó¨Î°ú"]:
            print(f"[DEBUG] >>> HANDLING GREETING <<<")
            response_text = await handle_greeting_response(req.message, tone)
            return create_simple_stream(response_text)

        # Ïò§ÌîÑÌÜ†ÌîΩ Ï≤òÎ¶¨ (nonsense Ìè¨Ìï®)
        elif intent in ["nonsense", "off_topic", "off_topic_interesting", "off_topic_boring", "off_topic_unclear"]:
            print(f"[DEBUG] >>> HANDLING OFF_TOPIC/NONSENSE: {intent} <<<")
            response_text = await handle_off_topic_response(req.message, tone)
            return create_simple_stream(response_text)

        # Í∏∞Ïà† Î¨∏Ï†ú
        elif intent == "tech_issue":
            print(f"[DEBUG] >>> HANDLING TECH_ISSUE <<<")
            response_text = await handle_tech_issue_response(req.message, tone)
            return create_simple_stream(response_text)

        # ÌòÑÏû¨ ÏÇ¨Ïö©Îüâ
        elif intent == "current_usage":
            print(f"[DEBUG] >>> HANDLING CURRENT_USAGE <<<")
            if tone == "muneoz":
                response_text = """ÌòÑÏû¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏ÌïòÍ≥† Ïã∂Íµ¨ÎÇò! üìä

Í∑∏Îü∞Îç∞ ÏÇ¨Ïö©Îüâ Í∏∞Î∞ò Ï∂îÏ≤úÏùÄ Îã§Î•∏ APIÎ•º Ïç®Ïïº Ìï¥~
ÏßÄÍ∏àÏùÄ ÏùºÎ∞ò ÏöîÍ∏àÏ†ú Ï∂îÏ≤úÏù¥ÎùºÎèÑ Ìï¥Î≥ºÍπå? üíú

ÎÑ§ ÌòÑÏû¨ ÏÉÅÌô©Ïóê Îî± ÎßûÎäî ÏöîÍ∏àÏ†ú Ï∂îÏ≤úÌï¥Ï§Ñ Ïàò ÏûàÏñ¥! üéØ"""
            else:
                response_text = """ÌòÑÏû¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏ÏùÑ ÏõêÌïòÏãúÎäîÍµ∞Ïöî! üìä

ÏÇ¨Ïö©Îüâ Í∏∞Î∞ò ÎßûÏ∂§ Ï∂îÏ≤úÏùÄ Î≥ÑÎèÑ APIÎ•º Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.
'ÏÇ¨Ïö©Îüâ Í∏∞Î∞ò Ï∂îÏ≤úÎ∞õÍ∏∞' Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ Îê©ÎãàÎã§.
ÌòÑÏû¨Îäî ÏùºÎ∞òÏ†ÅÏù∏ ÏöîÍ∏àÏ†ú ÏÉÅÎã¥ÏùÑ ÎèÑÏôÄÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§.
ÏõêÌïòÏãúÎäî ÏÑúÎπÑÏä§Í∞Ä ÏûàÏúºÏãúÎ©¥ ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî! üòä"""
            return create_simple_stream(response_text)

        # ÏöîÍ∏àÏ†ú Í¥ÄÎ†® - Î©ÄÌã∞ÌÑ¥ ÏãúÏûë
        elif intent in ["telecom_plan", "telecom_plan_direct"]:
            print(f"[DEBUG] >>> HANDLING TELECOM_PLAN - STARTING MULTI-TURN <<<")
            return await get_multi_turn_chain(req, "phone_plan_multi", tone)

        # Íµ¨ÎèÖ ÏÑúÎπÑÏä§ Í¥ÄÎ†® - Î©ÄÌã∞ÌÑ¥ ÏãúÏûë
        elif intent == "subscription":
            print(f"[DEBUG] >>> HANDLING SUBSCRIPTION - STARTING MULTI-TURN <<<")
            return await get_multi_turn_chain(req, "subscription_multi", tone)

        # UBTI
        elif intent == "ubti":
            print(f"[DEBUG] >>> HANDLING UBTI <<<")
            if tone == "muneoz":
                response_text = """Ïò§Ïò§! UBTI ÌïòÍ≥† Ïã∂Íµ¨ÎÇò? üéØ

UBTIÎäî Î≥ÑÎèÑ APIÏóêÏÑú ÏßÑÌñâÌï¥Ïïº Ìï¥!
'ÌÉÄÏΩîÏãúÍ∑∏ÎÑê Î∂ÑÏÑùÎ∞õÍ∏∞' Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥
4Îã®Í≥Ñ ÏßàÎ¨∏ Î∞õÍ≥† ÏôÑÏ†Ñ Ï∞∞Îñ°Ïù∏ ÌÉÄÏûÖ ÏïåÎ†§Ï§Ñ Ïàò ÏûàÏñ¥~ üêô

ÏßÄÍ∏àÏùÄ ÏöîÍ∏àÏ†úÎÇò Íµ¨ÎèÖ Ï∂îÏ≤ú ÏñòÍ∏∞Ìï†Íπå? üíú"""
            else:
                response_text = """UBTI ÏÑ±Ìñ• Î∂ÑÏÑùÏóê Í¥ÄÏã¨ ÏûàÏúºÏãúÍµ∞Ïöî! üéØ

UBTIÎäî Ï†ÑÏö© APIÎ•º ÌÜµÌï¥ ÏßÑÌñâÎê©ÎãàÎã§!
ÌÉÄÏΩîÏãúÍ∑∏ÎÑê Í≤ÄÏÇ¨ Î≤ÑÌäº ÎàåÎü¨Î≥¥ÏÑ∏Ïöî!

ÌòÑÏû¨Îäî ÏöîÍ∏àÏ†úÎÇò Íµ¨ÎèÖ ÏÑúÎπÑÏä§ ÏÉÅÎã¥ÏùÑ ÎèÑÏôÄÎìúÎ¶¥ Ïàò ÏûàÏñ¥Ïöî.
Ïñ¥Îñ§ ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÏã†Í∞ÄÏöî? üòä"""
            return create_simple_stream(response_text)

        # Í∏∞Î≥∏ ÏºÄÏù¥Ïä§ - Ïù∏ÏÇ¨ÎÇò ÏùºÎ∞òÏ†ÅÏù∏ ÎåÄÌôî
        else:
            print(f"[DEBUG] >>> HANDLING DEFAULT CASE FOR INTENT: {intent} <<<")
            if tone == "muneoz":
                response_text = """ÏïàÎáΩ! ü§ü ÎÇòÎäî Î¨¥ÎÑàÏïº~ üêô

ÏöîÍ∏àÏ†úÎÇò Íµ¨ÎèÖ ÏÑúÎπÑÏä§ Í¥ÄÎ†®Ìï¥ÏÑú Î≠êÎì†ÏßÄ Î¨ºÏñ¥Î¥ê!
- ÏöîÍ∏àÏ†ú Ï∂îÏ≤úÌï¥Ï§ò
- Íµ¨ÎèÖ ÏÑúÎπÑÏä§ Ï∂îÏ≤úÌï¥Ï§ò

Î≠ò ÎèÑÏôÄÏ§ÑÍπå? üíú"""
            else:
                response_text = """ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä LGÏú†ÌîåÎü¨Ïä§ ÏÉÅÎã¥ AIÏûÖÎãàÎã§.

Îã§ÏùåÍ≥º Í∞ôÏùÄ ÏÑúÎπÑÏä§Î•º ÎèÑÏôÄÎìúÎ¶¥ Ïàò ÏûàÏñ¥Ïöî:
- ÏöîÍ∏àÏ†ú Ï∂îÏ≤úÌï¥Ï£ºÏÑ∏Ïöî
- Íµ¨ÎèÖ ÏÑúÎπÑÏä§ Ï∂îÏ≤úÌï¥Ï£ºÏÑ∏Ïöî

Ïñ¥Îñ§ ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÏã†Í∞ÄÏöî?"""
            return create_simple_stream(response_text)

    except Exception as e:
        print(f"[ERROR] Intent handling failed: {e}")
        import traceback
        print(f"[ERROR] Traceback: {traceback.format_exc()}")
        return create_simple_stream(await handle_api_error_response(tone))

def _migrate_session_keys(session: dict, session_id: str):
    """Í∏∞Ï°¥ ÏÑ∏ÏÖò ÌÇ§Î•º ÌÜµÏùºÎêú ÌÇ§Î°ú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò"""
    migrated = False

    # Í∏∞Ï°¥ ÌÇ§ÏóêÏÑú ÌÜµÏùºÎêú ÌÇ§Î°ú Î≥ÄÌôò
    if "plan_step" in session and not session.get("phone_plan_flow_step"):
        session["phone_plan_flow_step"] = session.pop("plan_step")
        if "plan_info" in session:
            session["user_info"] = session.pop("plan_info")
        migrated = True

    if "subscription_step" in session and not session.get("subscription_flow_step"):
        session["subscription_flow_step"] = session.pop("subscription_step")
        if "subscription_info" in session:
            session["user_info"] = session.pop("subscription_info")
        migrated = True

    # ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ Î∞úÏÉùÌñàÏúºÎ©¥ Ï†ÄÏû•
    if migrated:
        save_session(session_id, session)
        print(f"[DEBUG] Session keys migrated successfully")

def _reset_multiturn_session(session: dict, session_id: str, flow_type: str):
    """Î©ÄÌã∞ÌÑ¥ ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî"""
    if flow_type == "phone_plan":
        session.pop("phone_plan_flow_step", None)
        session.pop("plan_step", None)
    elif flow_type == "subscription":
        session.pop("subscription_flow_step", None)
        session.pop("subscription_step", None)

    session.pop("user_info", None)
    session.pop("plan_info", None)
    session.pop("subscription_info", None)

    save_session(session_id, session)
    print(f"[DEBUG] {flow_type} multiturn session reset")

def _should_start_plan_flow(message: str) -> bool:
    """Î©îÏãúÏßÄÍ∞Ä ÏöîÍ∏àÏ†ú ÌîåÎ°úÏö∞Î•º ÏãúÏûëÌï¥Ïïº ÌïòÎäîÏßÄ ÌåêÎã®"""
    message_lower = message.lower()

    plan_indicators = [
        "gb", "Îç∞Ïù¥ÌÑ∞", "ÌÜµÌôî", "Î¨¥Ï†úÌïú", "5g", "lte",
        "ÎßåÏõê", "ÏöîÍ∏à", "ÌÜµÏã†ÎπÑ", "ÌîåÎûú", "ÎÑàÍ≤ü", "ÎùºÏù¥Ìä∏", "ÌîÑÎ¶¨ÎØ∏ÏóÑ"
    ]

    return any(indicator in message_lower for indicator in plan_indicators)

def _should_start_subscription_flow(message: str) -> bool:
    """Î©îÏãúÏßÄÍ∞Ä Íµ¨ÎèÖ ÌîåÎ°úÏö∞Î•º ÏãúÏûëÌï¥Ïïº ÌïòÎäîÏßÄ ÌåêÎã®"""
    message_lower = message.lower()

    subscription_indicators = [
        "Íµ¨ÎèÖ", "ott", "ÎÑ∑ÌîåÎ¶≠Ïä§", "Ïú†ÌäúÎ∏å", "ÏùåÏïÖ", "ÏßÄÎãà",
        "Ïä§Ìè¨Ìã∞ÌååÏù¥", "Ïõ®Ïù¥Î∏å", "ÎìúÎùºÎßà", "ÏòÅÌôî", "Ïä§ÌÉÄÎ≤ÖÏä§"
    ]

    return any(indicator in message_lower for indicator in subscription_indicators)

async def handle_api_error_response(tone: str = "general") -> str:
    """API Ïò§Î•ò Ïãú ÏùëÎãµ"""
    if tone == "muneoz":
        return """Ïñ¥Î®∏ Î≠îÍ∞Ä ÏÑúÎ≤ÑÍ∞Ä ÏÇêÎÅóÌñàÎÇòÎ¥ê! üò±
ÎÇ¥Í∞Ä ÏïÑÎãàÎùº ÏãúÏä§ÌÖú Î¨∏Ï†úÏïº!

Ïû†ÍπêÎßå Í∏∞Îã§Î†∏Îã§Í∞Ä Îã§Ïãú Î¨ºÏñ¥Î¥êÏ§ò~ üêô"""
    else:
        return """Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏùºÏãúÏ†ÅÏù∏ ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî. üòî
Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏãúÎ©¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÎèÑÏõÄÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§.

Î∂àÌé∏ÏùÑ ÎìúÎ†§ Ï£ÑÏÜ°Ìï¥Ïöî! üôè"""